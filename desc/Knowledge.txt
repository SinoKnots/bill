Spring boot
spring-boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，
从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为
领导者。多年以来，Spring IO平台饱受非议的一点就是大量的XML配置以及复杂的依赖管理。在2013年的SpringOne 2GX会议上，Pivotal的
CTO Adrian Colyer回应了这些批评，并且特别提到该平台将来的目标之一就是实现免XML配置的开发体验。Boot所实现的功能超出了这个任务的描述，
开发人员不仅不再需要编写XML，而且在一些场景中甚至不需要编写繁琐的import语句。在对外公开的beta版本刚刚发布之时，Boot描述了如何使用
该框架在140个字符内实现可运行的web应用，从而获得了极大的关注度，该样例发表在tweet上。

Spring boot是个什么东西？
无需繁琐配置的Spring集合包 Spring boot本身并不是什么新的框架，它可以说只是Spring大家族的一个集合包，
当然这个集合包吧基础的配置都给我配置好了，我们无需再进行繁琐的xml配置，甚至是都不用配置web.xml，
因为spring boot内部自己集成了一个tomcat，直接通过run的方式就能启动，打包也一样，都可以不用部署tomcat了，
当然是针对小项目，大项目肯定是要对中间件进行一些优化的

------------------------------------------------------------------------------------------------------
Mybatis
MyBatis是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架。MyBatis消除了几乎所有的JDBC代码和参数的手工设置以及对结果集的检索
封装。MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中
的记录。当然我个人更倾向用注解，因为实在是不怎么喜欢配置xml，尤其是eclipse经常因为xml的一些问题卡主，导致编译要等xml验证通过后才能
编译，而我用Mybatis最主要的地方就是因为不用像JDBC那样自己一个属性一个属性来赋值。



------------------------------------------------------------------------------------------------------
Druid
Druid是一个JDBC组件，它包括三部分：
	DruidDriver 代理Driver，能够提供基于Filter－Chain模式的插件体系。
	DruidDataSource 高效可管理的数据库连接池。
	SQLParser

Druid可以做什么？
1) 可以监控数据库访问性能，Druid内置提供了一个功能强大的StatFilter插件，能够详细统计SQL的执行性能，这对于线上分析数据库访问性能有帮助。
2) 替换DBCP和C3P0。Druid提供了一个高效、功能强大、可扩展性好的数据库连接池。
3) 数据库密码加密。直接把数据库密码写在配置文件中，这是不好的行为，容易导致安全问题。DruidDruiver和DruidDataSource都支持PasswordCallback。
4) SQL执行日志，Druid提供了不同的LogFilter，能够支持Common-Logging、Log4j和JdkLog，你可以按需要选择相应的LogFilter，监控你应用的数据库访问情况。
扩展JDBC，如果你要对JDBC层有编程的需求，可以通过Druid提供的Filter-Chain机制，很方便编写JDBC层的扩展插件。 其实说简单点Druid就是一个功能强大，
性能优秀的数据库连接池，是由阿里巴巴的大牛们开发的,除了性能好之外，我最喜欢的就是它的监控功能了，连github上的说明都是“为监控而生的数据库”。




------------------------------------------------------------------------------------------------------
@Api：用在类上，说明该类的作用 
@ApiOperation：用在方法上，说明方法的作用 
@ApiImplicitParams：用在方法上包含一组参数说明 
	@ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面 
		paramType：参数放在哪个地方 
			header-->请求参数的获取：@RequestHeader 
			query-->请求参数的获取：@RequestParam 
			path（用于restful接口）-->请求参数的获取：@PathVariable 
		name：参数名 
		dataType：参数类型 
		required：参数是否必须传 
		value：参数的意思 
		defaultValue：参数的默认值 
@ApiResponses：用于表示一组响应 
@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息 
	code：数字，例如400 
	message：信息，例如"请求参数没填好" 
	response：抛出异常的类 
@ApiModel：描述一个Model的信息（这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候） 
	@ApiModelProperty：描述一个model的属性
